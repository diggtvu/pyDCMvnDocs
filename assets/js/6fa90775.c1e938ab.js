"use strict";(self.webpackChunkdcmvn_cursor_bim_docs=self.webpackChunkdcmvn_cursor_bim_docs||[]).push([[206],{4305:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"features/inline-editing","title":"Agent Inline Editing","description":"Transform code using natural language descriptions with Cursor AI\'s inline editing feature","source":"@site/docs/features/inline-editing.md","sourceDirName":"features","slug":"/features/inline-editing","permalink":"/pyDCMvnDocs/docs/features/inline-editing","draft":false,"unlisted":false,"editUrl":"https://github.com/diggtvu/pyDCMvnDocs/tree/main/docs/features/inline-editing.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Agent Inline Editing","slug":"inline-editing","description":"Transform code using natural language descriptions with Cursor AI\'s inline editing feature","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Tab Autocomplete","permalink":"/pyDCMvnDocs/docs/features/tab-autocomplete"},"next":{"title":"Chat Overview","permalink":"/pyDCMvnDocs/docs/features/chat-mode"}}');var r=i(4848),s=i(8453);const o={title:"Agent Inline Editing",slug:"inline-editing",description:"Transform code using natural language descriptions with Cursor AI's inline editing feature",sidebar_position:2},l="Inline Editing with Natural Prompts",a={},d=[{value:"\ud83c\udf1f What is Inline Edit?",id:"-what-is-inline-edit",level:2},{value:"\ud83c\udfaf How to Use Inline Edit",id:"-how-to-use-inline-edit",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Advanced Usage",id:"advanced-usage",level:3},{value:"\ud83c\udfd7\ufe0f BIM Development Examples",id:"\ufe0f-bim-development-examples",level:2},{value:"Example 1: Adding Error Handling to Revit API Code",id:"example-1-adding-error-handling-to-revit-api-code",level:3},{value:"Example 2: Converting Simple Function to MVVM Pattern",id:"example-2-converting-simple-function-to-mvvm-pattern",level:3},{value:"Example 3: Adding MEP System Integration",id:"example-3-adding-mep-system-integration",level:3},{value:"\ud83c\udfa8 Advanced Inline Edit Techniques",id:"-advanced-inline-edit-techniques",level:2},{value:"1. <strong>Iterative Refinement</strong>",id:"1-iterative-refinement",level:3},{value:"2. <strong>Context-Aware Modifications</strong>",id:"2-context-aware-modifications",level:3},{value:"3. <strong>Domain-Specific Transformations</strong>",id:"3-domain-specific-transformations",level:3},{value:"\ud83d\udd27 Best Practices for Inline Edit",id:"-best-practices-for-inline-edit",level:2},{value:"1. <strong>Be Specific in Instructions</strong>",id:"1-be-specific-in-instructions",level:3},{value:"2. <strong>Use Domain Language</strong>",id:"2-use-domain-language",level:3},{value:"3. <strong>Specify Constraints</strong>",id:"3-specify-constraints",level:3},{value:"4. <strong>Consider Context</strong>",id:"4-consider-context",level:3},{value:"\ud83d\ude80 Terminal Integration",id:"-terminal-integration",level:2},{value:"PowerShell/Command Prompt",id:"powershellcommand-prompt",level:3},{value:"Python Scripts",id:"python-scripts",level:3},{value:"\ud83c\udfaf Common BIM Development Use Cases",id:"-common-bim-development-use-cases",level:2},{value:"1. <strong>API Version Compatibility</strong>",id:"1-api-version-compatibility",level:3},{value:"2. <strong>Performance Optimization</strong>",id:"2-performance-optimization",level:3},{value:"3. <strong>User Interface Enhancement</strong>",id:"3-user-interface-enhancement",level:3},{value:"4. <strong>Data Validation</strong>",id:"4-data-validation",level:3},{value:"5. <strong>Internationalization</strong>",id:"5-internationalization",level:3},{value:"\ud83d\udd0d Troubleshooting Inline Edit",id:"-troubleshooting-inline-edit",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"1. <strong>Ambiguous Instructions</strong>",id:"1-ambiguous-instructions",level:4},{value:"2. <strong>Context Missing</strong>",id:"2-context-missing",level:4},{value:"3. <strong>Large Selections</strong>",id:"3-large-selections",level:4},{value:"4. <strong>Complex Transformations</strong>",id:"4-complex-transformations",level:4},{value:"Best Results Tips",id:"best-results-tips",level:3},{value:"\ud83c\udf93 Practice Exercises",id:"-practice-exercises",level:2},{value:"Exercise 1: Error Handling",id:"exercise-1-error-handling",level:3},{value:"Exercise 2: MVVM Conversion",id:"exercise-2-mvvm-conversion",level:3},{value:"Exercise 3: Performance Optimization",id:"exercise-3-performance-optimization",level:3},{value:"Exercise 4: MEP Integration",id:"exercise-4-mep-integration",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"inline-editing-with-natural-prompts",children:"Inline Editing with Natural Prompts"})}),"\n",(0,r.jsx)(n.p,{children:"Cursor's Inline Edit feature revolutionizes how you modify code by allowing natural language descriptions of changes. This is particularly powerful for BIM development where complex architectural patterns and domain-specific requirements can be challenging to implement."}),"\n",(0,r.jsx)(n.h2,{id:"-what-is-inline-edit",children:"\ud83c\udf1f What is Inline Edit?"}),"\n",(0,r.jsx)(n.p,{children:"Inline Edit allows you to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Select code and describe changes in plain English"}),"\n",(0,r.jsx)(n.li,{children:"Modify complex patterns without manual refactoring"}),"\n",(0,r.jsx)(n.li,{children:"Translate business requirements directly into code"}),"\n",(0,r.jsx)(n.li,{children:"Maintain code quality during rapid iterations"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-how-to-use-inline-edit",children:"\ud83c\udfaf How to Use Inline Edit"}),"\n",(0,r.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Select code"})," that needs modification"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Press Ctrl+K"})," (or Cmd+K on Mac)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Type your instruction"})," in natural language"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Press Enter"})," to apply changes"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multi-line selections"})," for complex refactoring"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Partial selections"})," to modify specific parts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multiple iterations"})," to refine changes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Undo/redo"})," support for experimentation"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-bim-development-examples",children:"\ud83c\udfd7\ufe0f BIM Development Examples"}),"\n",(0,r.jsx)(n.h3,{id:"example-1-adding-error-handling-to-revit-api-code",children:"Example 1: Adding Error Handling to Revit API Code"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Original Code:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def get_wall_areas():\n    doc = __revit__.ActiveUIDocument.Document\n    collector = FilteredElementCollector(doc)\n    walls = collector.OfCategory(BuiltInCategory.OST_Walls)\n  \n    areas = []\n    for wall in walls:\n        param = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED)\n        areas.append(param.AsDouble())\n  \n    return areas\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Inline Edit Instruction:"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:'"Add proper error handling for null parameters and empty collections, include logging"'}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Result:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def get_wall_areas():\n    """Get areas of all walls with proper error handling."""\n    try:\n        doc = __revit__.ActiveUIDocument.Document\n        if not doc:\n            output.print("No active document found")\n            return []\n          \n        collector = FilteredElementCollector(doc)\n        walls = collector.OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType()\n      \n        if not walls:\n            output.print("No walls found in document")\n            return []\n      \n        areas = []\n        for wall in walls:\n            try:\n                param = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED)\n                if param and param.HasValue:\n                    areas.append(param.AsDouble())\n                else:\n                    output.print(f"Wall {wall.Id} has no area parameter")\n            except Exception as e:\n                output.print(f"Error processing wall {wall.Id}: {e}")\n                continue\n      \n        output.print(f"Successfully processed {len(areas)} walls")\n        return areas\n      \n    except Exception as e:\n        output.print(f"Error in get_wall_areas: {e}")\n        return []\n'})}),"\n",(0,r.jsx)(n.h3,{id:"example-2-converting-simple-function-to-mvvm-pattern",children:"Example 2: Converting Simple Function to MVVM Pattern"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Original Code:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def show_room_list():\n    rooms = get_rooms_from_revit()\n    for room in rooms:\n        print(f"{room.Number}: {room.Name}")\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Inline Edit Instruction:"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:'"Convert this to MVVM pattern with WPF window, observable collection, and proper data binding"'}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Result:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class RoomListViewModel(INotifyPropertyChanged):\n    def __init__(self):\n        self._rooms = ObservableCollection[RoomModel]()\n        self._selected_room = None\n        self.load_rooms()\n  \n    @property\n    def rooms(self):\n        return self._rooms\n  \n    @rooms.setter\n    def rooms(self, value):\n        self._rooms = value\n        self.on_property_changed("rooms")\n  \n    @property\n    def selected_room(self):\n        return self._selected_room\n  \n    @selected_room.setter\n    def selected_room(self, value):\n        self._selected_room = value\n        self.on_property_changed("selected_room")\n  \n    def load_rooms(self):\n        try:\n            revit_rooms = get_rooms_from_revit()\n            self.rooms.Clear()\n            for room in revit_rooms:\n                room_model = RoomModel(room.Number, room.Name, room.Area)\n                self.rooms.Add(room_model)\n        except Exception as e:\n            MessageBox.Show(f"Error loading rooms: {e}")\n  \n    def on_property_changed(self, property_name):\n        if self.PropertyChanged:\n            self.PropertyChanged(self, PropertyChangedEventArgs(property_name))\n\ndef show_room_list():\n    window = RoomListWindow()\n    window.DataContext = RoomListViewModel()\n    window.ShowDialog()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"example-3-adding-mep-system-integration",children:"Example 3: Adding MEP System Integration"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Original Code:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def get_mechanical_equipment():\n    doc = __revit__.ActiveUIDocument.Document\n    collector = FilteredElementCollector(doc)\n    equipment = collector.OfCategory(BuiltInCategory.OST_MechanicalEquipment)\n    return list(equipment)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Inline Edit Instruction:"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:'"Extend this to include connected ducts, calculate airflow, and group by system type"'}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Result:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def get_mechanical_equipment_with_systems():\n    \"\"\"Get mechanical equipment with connected MEP systems and airflow data.\"\"\"\n    doc = __revit__.ActiveUIDocument.Document\n    collector = FilteredElementCollector(doc)\n    equipment = collector.OfCategory(BuiltInCategory.OST_MechanicalEquipment).WhereElementIsNotElementType()\n  \n    equipment_data = []\n  \n    for equip in equipment:\n        try:\n            equip_info = {\n                'element': equip,\n                'name': equip.Name,\n                'type': equip.get_Parameter(BuiltInParameter.ELEM_TYPE_PARAM).AsValueString(),\n                'connected_ducts': [],\n                'airflow': 0,\n                'system_type': None\n            }\n          \n            # Get connected ducts\n            connectors = equip.MEPModel.ConnectorManager.Connectors\n            for connector in connectors:\n                if connector.Domain == Domain.DomainHvac:\n                    for ref_connector in connector.AllRefs:\n                        if ref_connector.Owner.Category.Id.IntegerValue == int(BuiltInCategory.OST_DuctCurves):\n                            equip_info['connected_ducts'].append(ref_connector.Owner)\n          \n            # Calculate total airflow\n            flow_param = equip.get_Parameter(BuiltInParameter.RBS_DUCT_FLOW_PARAM)\n            if flow_param and flow_param.HasValue:\n                equip_info['airflow'] = flow_param.AsDouble()\n          \n            # Get system type\n            system_param = equip.get_Parameter(BuiltInParameter.RBS_SYSTEM_NAME_PARAM)\n            if system_param and system_param.HasValue:\n                equip_info['system_type'] = system_param.AsString()\n          \n            equipment_data.append(equip_info)\n          \n        except Exception as e:\n            output.print(f\"Error processing equipment {equip.Id}: {e}\")\n            continue\n  \n    # Group by system type\n    grouped_equipment = {}\n    for equip in equipment_data:\n        system_type = equip['system_type'] or 'Unassigned'\n        if system_type not in grouped_equipment:\n            grouped_equipment[system_type] = []\n        grouped_equipment[system_type].append(equip)\n  \n    return grouped_equipment\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-advanced-inline-edit-techniques",children:"\ud83c\udfa8 Advanced Inline Edit Techniques"}),"\n",(0,r.jsxs)(n.h3,{id:"1-iterative-refinement",children:["1. ",(0,r.jsx)(n.strong,{children:"Iterative Refinement"})]}),"\n",(0,r.jsx)(n.p,{children:"Use multiple inline edits to progressively improve code:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Step 1: Basic function\ndef process_elements():\n    pass\n\n# Inline Edit 1: "Add basic element collection"\n# Inline Edit 2: "Add filtering by category"\n# Inline Edit 3: "Add parameter extraction"\n# Inline Edit 4: "Add error handling and logging"\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"2-context-aware-modifications",children:["2. ",(0,r.jsx)(n.strong,{children:"Context-Aware Modifications"})]}),"\n",(0,r.jsx)(n.p,{children:"Cursor understands your project context:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Inline Edit: "Make this compatible with Revit 2019-2024"\n# Cursor knows to use version-appropriate API calls\n\n# Inline Edit: "Add support for linked models"\n# Cursor understands Revit linking patterns\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"3-domain-specific-transformations",children:["3. ",(0,r.jsx)(n.strong,{children:"Domain-Specific Transformations"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Inline Edit: "Convert this to use Revit units consistently"\n# Inline Edit: "Add BIM 360 compatibility"\n# Inline Edit: "Make this work with both metric and imperial units"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-best-practices-for-inline-edit",children:"\ud83d\udd27 Best Practices for Inline Edit"}),"\n",(0,r.jsxs)(n.h3,{id:"1-be-specific-in-instructions",children:["1. ",(0,r.jsx)(n.strong,{children:"Be Specific in Instructions"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'\u274c "Make this better"'}),"\n",(0,r.jsx)(n.li,{children:'\u2705 "Add input validation and user-friendly error messages"'}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"2-use-domain-language",children:["2. ",(0,r.jsx)(n.strong,{children:"Use Domain Language"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'\u274c "Add database stuff"'}),"\n",(0,r.jsx)(n.li,{children:'\u2705 "Add parameter synchronization with Revit shared parameters"'}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"3-specify-constraints",children:["3. ",(0,r.jsx)(n.strong,{children:"Specify Constraints"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'\u274c "Add error handling"'}),"\n",(0,r.jsx)(n.li,{children:'\u2705 "Add error handling that shows user-friendly dialogs and logs to pyRevit output"'}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"4-consider-context",children:["4. ",(0,r.jsx)(n.strong,{children:"Consider Context"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Instead of: "Add caching"\n# Use: "Add caching for element collections to improve performance in large models"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-terminal-integration",children:"\ud83d\ude80 Terminal Integration"}),"\n",(0,r.jsx)(n.p,{children:"Inline Edit also works in the terminal for command-line operations:"}),"\n",(0,r.jsx)(n.h3,{id:"powershellcommand-prompt",children:"PowerShell/Command Prompt"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Select command and use Inline Edit:\n# "Make this command work for both Debug and Release builds"\n\n# Original:\ndotnet build MyRevitAddin.csproj\n\n# After Inline Edit:\ndotnet build MyRevitAddin.csproj -c Debug && dotnet build MyRevitAddin.csproj -c Release\n'})}),"\n",(0,r.jsx)(n.h3,{id:"python-scripts",children:"Python Scripts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Inline Edit: \"Add command line argument parsing for input file path\"\n\n# Original:\ninput_file = \"default.xlsx\"\n\n# Result:\nimport argparse\n\nparser = argparse.ArgumentParser(description='Process BIM data from Excel')\nparser.add_argument('--input', '-i', required=True, help='Input Excel file path')\nparser.add_argument('--output', '-o', default='output.xlsx', help='Output Excel file path')\nargs = parser.parse_args()\n\ninput_file = args.input\noutput_file = args.output\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-common-bim-development-use-cases",children:"\ud83c\udfaf Common BIM Development Use Cases"}),"\n",(0,r.jsxs)(n.h3,{id:"1-api-version-compatibility",children:["1. ",(0,r.jsx)(n.strong,{children:"API Version Compatibility"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Inline Edit: "Make this work with both Revit 2022 and 2024 API changes"\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"2-performance-optimization",children:["2. ",(0,r.jsx)(n.strong,{children:"Performance Optimization"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Inline Edit: "Optimize this for large models with 10,000+ elements"\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"3-user-interface-enhancement",children:["3. ",(0,r.jsx)(n.strong,{children:"User Interface Enhancement"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Inline Edit: "Add progress bar and cancel button to this long-running operation"\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"4-data-validation",children:["4. ",(0,r.jsx)(n.strong,{children:"Data Validation"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Inline Edit: "Add comprehensive validation for MEP connector data"\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"5-internationalization",children:["5. ",(0,r.jsx)(n.strong,{children:"Internationalization"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Inline Edit: "Make all user messages localizable and add support for metric/imperial units"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-troubleshooting-inline-edit",children:"\ud83d\udd0d Troubleshooting Inline Edit"}),"\n",(0,r.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,r.jsxs)(n.h4,{id:"1-ambiguous-instructions",children:["1. ",(0,r.jsx)(n.strong,{children:"Ambiguous Instructions"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Problem"}),': "Add validation"']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),': "Add validation for required parameters and numeric ranges"']}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"2-context-missing",children:["2. ",(0,r.jsx)(n.strong,{children:"Context Missing"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Problem"}),": Changes don't match project patterns"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Ensure Project Rules in .cursor/rules/ include your coding standards"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"3-large-selections",children:["3. ",(0,r.jsx)(n.strong,{children:"Large Selections"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Problem"}),": Inline Edit modifies too much code"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Select smaller, focused code blocks"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"4-complex-transformations",children:["4. ",(0,r.jsx)(n.strong,{children:"Complex Transformations"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Problem"}),": Multiple requirements in one instruction"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Break into multiple sequential inline edits"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"best-results-tips",children:"Best Results Tips"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Select Relevant Context"}),": Include enough surrounding code for context"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use Precise Language"}),": Be specific about BIM/Revit terminology"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Verify Results"}),": Always review generated code before committing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Iterate"}),": Use multiple small edits rather than one large transformation"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-practice-exercises",children:"\ud83c\udf93 Practice Exercises"}),"\n",(0,r.jsx)(n.h3,{id:"exercise-1-error-handling",children:"Exercise 1: Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"Take any simple Revit API function and use Inline Edit to add comprehensive error handling."}),"\n",(0,r.jsx)(n.h3,{id:"exercise-2-mvvm-conversion",children:"Exercise 2: MVVM Conversion"}),"\n",(0,r.jsx)(n.p,{children:"Convert a procedural pyRevit script to MVVM pattern using Inline Edit."}),"\n",(0,r.jsx)(n.h3,{id:"exercise-3-performance-optimization",children:"Exercise 3: Performance Optimization"}),"\n",(0,r.jsx)(n.p,{children:"Use Inline Edit to optimize element collection code for large models."}),"\n",(0,r.jsx)(n.h3,{id:"exercise-4-mep-integration",children:"Exercise 4: MEP Integration"}),"\n",(0,r.jsx)(n.p,{children:"Add MEP system awareness to a basic element processing function."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"Ready to combine Inline Edit with other Cursor features? Next, let's explore how Tab completion and Agent Mode work together for powerful BIM development workflows."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Next"}),": ",(0,r.jsx)(n.a,{href:"/pyDCMvnDocs/docs/hands-on/agent-coding-demo",children:"Agent Mode Deep Dive"})," - Autonomous AI development sessions"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var t=i(6540);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);